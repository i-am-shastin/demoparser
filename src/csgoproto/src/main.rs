use std::collections::BTreeMap;
use std::fs::File;
use std::io::{Result, Write};
use csgoproto::{EBaseGameEvents, EBaseUserMessages, ECstrike15UserMessages, NetMessages, SvcMessages};
use strum::IntoEnumIterator;

pub mod parser;
use crate::parser::parse;

fn main() -> Result<()> {
    create_net_message_enum()?;
    create_items_map()
}

const ENUM_TEMPLATE: &str =
"// Autogenerated by main.rs

#[derive(Debug, PartialEq)]
#[allow(non_camel_case_types)]
pub enum NetMessageType {
    Unknown,
    __$$__,
}
";

const CONVERT_TEMPLATE: &str = 
"
impl From<i32> for NetMessageType {
    fn from(msg_type: i32) -> Self {
        use NetMessageType::*;

        match msg_type {
            __$$__,
            _ => Unknown,
        }
    }
}";

fn create_net_message_enum() -> Result<()> {
    let mut file = File::create("src/message_type.rs")?;

    let mut merged_enum = BTreeMap::new();
    merged_enum.extend(NetMessages::iter().map(|e| (e as i32, e.as_str_name())));
    merged_enum.extend(SvcMessages::iter().map(|e| (e as i32, e.as_str_name())));
    merged_enum.extend(EBaseUserMessages::iter().map(|e| (e as i32, e.as_str_name())));
    merged_enum.extend(EBaseGameEvents::iter().map(|e| (e as i32, e.as_str_name())));
    merged_enum.extend(ECstrike15UserMessages::iter().map(|e| (e as i32, e.as_str_name())));

    let enum_values = merged_enum.values()
        .fold(String::new(), |output, value| {
            append_line(output, 4, value)
        });
    file.write_all(ENUM_TEMPLATE.replace("__$$__", &enum_values).as_bytes())?;

    let enum_mapping = merged_enum.into_iter()
        .fold(String::new(), |output, (msg_type, msg_name)| {
            append_line(output, 12, &format!("{msg_type} => {msg_name}"))
        });
    file.write_all(CONVERT_TEMPLATE.replace("__$$__", &enum_mapping).as_bytes())
}

fn append_line(mut output: String, tab_size: usize, value: &str) -> String {
    if !output.is_empty() {
        output += &format!(",\n{}", " ".repeat(tab_size));
    }
    output += value;
    output
}

fn create_items_map() -> Result<()> {
    let items_data = std::fs::read_to_string("GameTracking-CS2/game/csgo/pak01_dir/scripts/items/items_game.txt")?;
    let items_data = std::fs::read_to_string("GameTracking-CS2/game/csgo/pak01_dir/resource/csgo_english.txt")?;
    let a = parse(items_data.trim());
    Ok(())
}